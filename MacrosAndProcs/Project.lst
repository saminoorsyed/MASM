Microsoft (R) Macro Assembler Version 14.29.30146.0	    12/01/22 20:29:18
!Proj5_syeds     (Proj5_syeds.asm			     Page 1 - 1


				TITLE Proj5_syeds     (Proj5_syeds.asm)

				; Author: Sami Noor Syed
				; Last Modified: 12/01/2022
				; OSU email address: syeds@oregonstate.edu
				; Course number/section:   CS271 Section 406
				; Project Number:  Proj-5          Due Date: 12/04/2022
				; Description: Program does the following:
				;	1. Implement two Macros to read user input and to display an output
				;		a. mGetString: displays a prompt, gets the user's input to a mem location
				;		b. mDisplay String: Print the strin which is stored in a specific memory location
				;	2. implement two procedures for signed integers which use string primitive instrutions
				;		a. ReadVal, which invokes mGetstring to get the user input,
				;			Converts (using string primitives) a string of acsii digits to their numeric vals
				;			validates the user's input (no letters, non number characters)
				;			Stores that value in a memory variable (output param, by reference)
				;		b. Writeval, converts a numeric SDWORD value (input parameter, by val) to a string of acsii digits
				;			invokes the mDisplayString macro to print the ascii SDWORD value to the output
				;	3. Implement a test program which uses ReadVal and WriteVal procedures to do the following:
				;		a. get 10 valid integers from the user. (loop in main calling readVal and writeVal
				;		b. stores those numeric values in an arrau
				;		c. Displays the integers, their sums and truncated averages
				;
				; Goals: 
				;	implement Macros
				;	Designing, implementing, and calling low-level I/O procedures)
				;	Gosh this one was a toughie too :/

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;**********************************************************************************
				; Name: mDisplayString
				;
				; Procedure display a string stored in a memory loation
				;
				; Receives: Parameters {stringOffset(reference, input)}
				;
				; Returns: prints the string located at the specified memory location
				;
				; Registers changed: EDX (but its restored)
				;**********************************************************************************

				mDisplayString	MACRO	stringOffset

					PUSH	EDX				;save register on the stack
					;print the string
					MOV		EDX, stringOffset
					CALL	WriteString
					POP		EDX				;restore register

				ENDM


				;**********************************************************************************
				; Name: mGetString
				;
				; Procedure to prompt the user for a number and then moves user's keyboard input into a memory lovation (output parameter, by reference)
				;
				; Receives: Parameters {promptOffset(reference, input); buffer(refernce, input), bufferSize(value, input)}
				;
				; Returns: prints prompt supplied and stores user's keyboard input at the address of the string buffer, register EAX contains the number of characters read
				;
				; Registers changed: EDX, ECX,(these first two are restored), EAX (returns the number of characters read)
				;**********************************************************************************

				mGetString MACRO promptOffset, buffer, bufferSize

					;save registers on the stack
					PUSH	ECX
					PUSH	EDX
					
					;prompt user for a number and store that number in
					mDisplayString	promptOffset
					MOV		EDX, buffer
					MOV		ECX, bufferSize
					CALL	Readstring
					
					;restore registers except for EAX
					POP		EDX
					POP		ECX
				ENDM



				; (insert constant definitions here)

 00000000			.data

				; (insert variable definitions here)
 00000000 41 73 73 69 67	titleText		BYTE	"Assignment 6: Macros & low-level I/O procedures", 13, 10,
	   6E 6D 65 6E 74
	   20 36 3A 20 4D
	   61 63 72 6F 73
	   20 26 20 6C 6F
	   77 2D 6C 65 76
	   65 6C 20 49 2F
	   4F 20 70 72 6F
	   63 65 64 75 72
	   65 73 0D 0A 42
	   79 20 53 61 6D
	   69 20 4E 6F 6F
	   72 20 53 79 65
	   64 00
										"By Sami Noor Syed", 0
 00000043 41 66 74 65 72	instructText	BYTE	"After you finish entering 10 signed integers, this program will display", 13, 10,
	   20 79 6F 75 20
	   66 69 6E 69 73
	   68 20 65 6E 74
	   65 72 69 6E 67
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 69 73
	   20 70 72 6F 67
	   72 61 6D 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 0D 0A 61 20
	   6C 69 73 74 20
	   6F 66 20 74 68
	   6F 73 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 00
										"a list of those integers, their sum and their average value.", 0
 000000C9 50 6C 65 61 73	promptText		BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 000000E9 79 6F 75 20 64	invalidText		BYTE	"you did not enter a signed integer, or the number was too large (far from zero)", 0
	   69 64 20 6E 6F
	   74 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 2C
	   20 6F 72 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   77 61 73 20 74
	   6F 6F 20 6C 61
	   72 67 65 20 28
	   66 61 72 20 66
	   72 6F 6D 20 7A
	   65 72 6F 29 00
 00000139 54 68 65 20 66	arrayText		BYTE	"The following are the valid numbers that you entered: ", 0
	   6F 6C 6C 6F 77
	   69 6E 67 20 61
	   72 65 20 74 68
	   65 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   20 74 68 61 74
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 3A 20 00
 00000170 54 68 65 20 73	sumText			BYTE	"The sum of those integers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 6F 73
	   65 20 69 6E 74
	   65 67 65 72 73
	   20 69 73 3A 20
	   00
 0000018F 54 68 65 20 74	averageText		BYTE	"The truncated average of those integers is: ", 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 6F 73 65
	   20 69 6E 74 65
	   67 65 72 73 20
	   69 73 3A 20 00
 000001BC 47 6F 6F 64 20	farewellText	BYTE	"Good bye!, thanks for playing along!", 0
	   62 79 65 21 2C
	   20 74 68 61 6E
	   6B 73 20 66 6F
	   72 20 70 6C 61
	   79 69 6E 67 20
	   61 6C 6F 6E 67
	   21 00
 000001E1 2C 20 00		commaSpace		BYTE	", ", 0
				;non-text variables

 000001E4  0000000A [		numArray		DWORD	10 DUP(?)
	    00000000
	   ]
 0000020C 00000000		transitNum		DWORD	?
 00000000			.code
 00000000			main PROC
					
 00000000  68 00000000 R		PUSH	OFFSET		titleText
 00000005  68 00000043 R		PUSH	OFFSET		instructText
 0000000A  E8 0000009E			CALL	intro

					;set up Loop to call readVal/ move user input to array once validated
 0000000F  B9 0000000A			MOV		ECX, LENGTHOF numArray
 00000014  BF 000001E4 R		MOV		EDI, OFFSET	numArray

 00000019			getNumbers:
					;adjust offset value to next empty element for the next Loop
 00000019  68 0000020C R		PUSH	OFFSET	transitNum
 0000001E  68 000000C9 R		PUSH	OFFSET	promptText
 00000023  68 000000E9 R		PUSH	OFFSET	invalidText	
 00000028  E8 000000B1			CALL	readVal
 0000002D  E8 00000000 E		CALL	CrLf
 00000032  A1 0000020C R		MOV		EAX, transitNum
 00000037  89 07			MOV		[EDI], EAX
 00000039  83 C7 04			ADD		EDI, 4
					
 0000003C  E2 DB			LOOP	getNumbers
				;loop through write value
					mDisplayString	OFFSET arrayText
 0000003E  52		     1		PUSH	EDX				;save register on the stack
 0000003F  BA 00000139 R     1		MOV		EDX, OFFSET arrayText
 00000044  E8 00000000 E     1		CALL	WriteString
 00000049  5A		     1		POP		EDX				;restore register
 0000004A  E8 00000000 E		CALL	CrLF
 0000004F  BE 000001E4 R		MOV		ESI, OFFSET numArray
 00000054  B9 0000000A			MOV		ECX, LENGTHOF numArray

					;write valid numbers in a list
 00000059			writeNumbers:
 00000059  8B 06			MOV		EAX, [ESI]
 0000005B  50				PUSH	EAX
 0000005C  E8 000001BB			CALL	writeVal
 00000061  83 F9 01			CMP		ECX, 1
 00000064  74 0F			JE		endLoop			;don't print a comma after the last number
					mDisplayString OFFSET commaSpace
 00000066  52		     1		PUSH	EDX				;save register on the stack
 00000067  BA 000001E1 R     1		MOV		EDX, OFFSET commaSpace
 0000006C  E8 00000000 E     1		CALL	WriteString
 00000071  5A		     1		POP		EDX				;restore register
 00000072  83 C6 04			ADD		ESI, 4
 00000075			endLoop:
 00000075  E2 E2			LOOP	writeNumbers

					;push args to sumAvg
 00000077  E8 00000000 E		CALL	CrLf
 0000007C  E8 00000000 E		CALL	CrLf
 00000081  68 0000018F R		PUSH	OFFSET averageText
 00000086  68 00000170 R		PUSH	OFFSET sumText
 0000008B  68 000001E4 R		PUSH	OFFSET numArray
 00000090  6A 0A			PUSH	LENGTHOF numArray
 00000092  E8 000001F9			CALL	sumAvg

					;push args to goodby
 00000097  68 000001BC R		PUSH	OFFSET	farewellText
 0000009C  E8 0000024D			CALL	goodbye
 000000A1  E8 00000000 E		CALL	CrLf

					Invoke ExitProcess, 0	; exit to operating system
 000000A6  6A 00	   *	    push   +000000000h
 000000A8  E8 00000000 E   *	    call   ExitProcess
 000000AD			main ENDP

				;**********************************************************************************
				; Name: introduction
				;
				; Procedure to print an introduction, description prompts
				;
				; Recieves: titleText [EBP + 16]
				;			instructionText[EBP + 12]
				;
				; Returns: prints all strings and introductions to the prompt
				;
				; Registers used: EDX
				;**********************************************************************************

 000000AD			intro	PROC	USES	EDX
 000000AD  52		   *	    push   edx
 000000AE  55				PUSH	EBP
 000000AF  8B EC			MOV		EBP, ESP

				;	print the title and intro/instructions
					mDisplayString	[EBP + 16]
 000000B1  52		     1		PUSH	EDX				;save register on the stack
 000000B2  8B 55 10	     1		MOV		EDX, [EBP + 16]
 000000B5  E8 00000000 E     1		CALL	WriteString
 000000BA  5A		     1		POP		EDX				;restore register
 000000BB  E8 00000000 E		CALL	CrLf
 000000C0  E8 00000000 E		CALL	CrLf
					mDisplayString	[EBP + 12]
 000000C5  52		     1		PUSH	EDX				;save register on the stack
 000000C6  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 000000C9  E8 00000000 E     1		CALL	WriteString
 000000CE  5A		     1		POP		EDX				;restore register
 000000CF  E8 00000000 E		CALL	CrLf
 000000D4  E8 00000000 E		CALL	CrLf

 000000D9  5D				POP		EBP
 000000DA  5A		   *	    pop    edx
 000000DB  C2 0008			RET	8
 000000DE			intro	ENDP

				;**********************************************************************************
				; Name: readVal
				;
				; Procedure to read the value entered by a user and convert it to an integer which returned by reference
				;
				; Receives: OFFSET	transitNum	[EBP + 16]
				;			OFFSET	promptText	[EBP + 12]
				;			OFFSET	invalidText	[EBP + 8]
				;
				; Returns: integer value conversion of entered string at memory location specified by transitNum
				;
				; Registers used: EDX, EAX, EBX, ECX, EDI, ESI
				;**********************************************************************************

 000000DE			readVal Proc
					;set buffer to 20 characters because more than that is rediculous
					LOCAL	inputInt[20]:BYTE, verified:DWORD
 000000DE  55		   *	    push   ebp
 000000DF  8B EC	   *	    mov    ebp, esp
 000000E1  83 C4 E8	   *	    add    esp, 0FFFFFFE8h
 000000E4  60				PUSHAD

 000000E5			getInput:
					;pass arguments to Macro [promptText, inputInt address, inputIntLength]
 000000E5  8D 5D EC			LEA		EBX, inputInt
					mGetString	[EBP+12], EBX, LENGTHOF inputInt
 000000E8  51		     1		PUSH	ECX
 000000E9  52		     1		PUSH	EDX
 000000EA  52		     2		PUSH	EDX				;save register on the stack
 000000EB  8B 55 0C	     2		MOV		EDX, [EBP+12]
 000000EE  E8 00000000 E     2		CALL	WriteString
 000000F3  5A		     2		POP		EDX				;restore register
 000000F4  8B D3	     1		MOV		EDX, EBX
 000000F6  B9 00000014	     1		MOV		ECX, LENGTHOF inputInt
 000000FB  E8 00000000 E     1		CALL	Readstring
 00000100  5A		     1		POP		EDX
 00000101  59		     1		POP		ECX
					
					;if the characters read is greater than 19 digits or no digits were read, display an invalid messsage and reprompt
 00000102  83 F8 13			CMP		EAX, 19
 00000105  7F 19			JG		invalid
 00000107  83 F8 00			CMP		EAX, 0
 0000010A  74 14			JE		invalid
					
					;Pass arguments to validate Chars subProc
 0000010C  8D 7D E8			LEA		EDI, verified
 0000010F  57				PUSH	EDI
 00000110  53				PUSH	EBX
 00000111  50				PUSH	EAX
 00000112  E8 0000003D			CALL	validateChars
					
					;check return value by reference (EDI is still effective value for verified local variable)
 00000117  8B 17			MOV		EDX, [EDI]
 00000119  83 FA 01			CMP		EDX, 1
 0000011C  74 02			JE		invalid
 0000011E  EB 19			JMP		valid
					
					;print invalid message, clear verified local variable jump to beginning
 00000120			invalid:
					mDisplayString [EBP + 8]	
 00000120  52		     1		PUSH	EDX				;save register on the stack
 00000121  8B 55 08	     1		MOV		EDX, [EBP + 8]
 00000124  E8 00000000 E     1		CALL	WriteString
 00000129  5A		     1		POP		EDX				;restore register
 0000012A  B8 00000000			MOV		EAX, 0
 0000012F  89 45 E8			MOV		verified, EAX
 00000132  E8 00000000 E		CALL	CrLf
 00000137  EB AC			JMP		getInput
					
					;if characters are all valid, push args to convert
 00000139			valid:
 00000139  FF 75 10			PUSH	[EBP + 16]		;transit NUM
 0000013C  8D 7D E8			LEA		EDI, verified
 0000013F  57				PUSH	EDI
 00000140  50				PUSH	EAX
 00000141  53				PUSH	EBX
 00000142  E8 0000004C			CALL	convert
					
					;check return value (verified) to see if the number is still valid
 00000147  8B 45 E8			MOV		EAX, verified
 0000014A  83 F8 01			CMP		EAX, 1
 0000014D  74 D1			JE		invalid
 0000014F  61				POPAD
 00000150  C9		   *	    leave  
 00000151  C2 000C			RET	12
 00000154			readVal		ENDP

				;**********************************************************************************
				; Name: validateChars
				;
				; Procedure to validate the value entered by a user.
				;
				; Preconditions: input string is type BYTE
				;
				; Postconditions: verified is adjusted according to returns
				;
				; Receives: [EBP + 16]		OFFSET	of "verified" local variable
				;			[EBP + 12]		OFFSET	of  string value entered by user
				;			[EBP + 8]		number of characters read by Value	
				;
				; Returns: verified (local variable) as 0 for valid inputs and 1 for invalid inputs 
				;
				; Registers used: EDI, ECX, ESI, EAX
				;**********************************************************************************

 00000154			validateChars	PROC 
 00000154  55				PUSH	EBP
 00000155  8B EC			MOV		EBP, ESP
					
					;save registers and pass in parameters
 00000157  60				PUSHAD
 00000158  8B 7D 10			MOV		EDI, [EBP + 16]
 0000015B  8B 4D 08			MOV		ECX, [EBP + 8]			;length of string in ECX
 0000015E  8B 75 0C			MOV		ESI, [EBP +12]			;Characters in ESI
					
					;load in the first character (BYTE) from the string to AL
					;if characters are not numbers integers in ACSII, jump to invalidChar section 
 00000161				checkChar:
 00000161  AC					LODSB
 00000162  3C 2F				CMP		AL, 47	
 00000164  7E 08				JLE		invalidChar
 00000166  3C 3A				cmp		AL, 58
 00000168  7D 04				JGE		invalidChar
 0000016A  E2 F5				LOOP	checkCHar
 0000016C  EB 20				JMP		ending
						
						;if the first character, jump to firstCharCheck, otherwise, change verified to 1 (for invalid) and end proc
 0000016E				invalidChar:
 0000016E  3B 4D 08				cmp		ECX, [EBP+8]
 00000171  74 09				JE		firstCharCHeck
 00000173  B8 00000001				MOV		EAX, 1
 00000178  89 07				MOV		[EDI], EAX
 0000017A  EB 12				JMP		ending
						
						;if the first char, check if it is a '+' or '-'. if not, change verified to 1 (for invalid) and end proc
 0000017C				firstCharCHeck:
 0000017C  49					DEC		ECX				;decriment loop count by 1 to account for sign BYTE
 0000017D  3C 2B				cmp		AL, 43			;for '+'
 0000017F  74 E0				JE		checkChar
 00000181  3C 2D				CMP		AL, 45			;for '-'
 00000183  74 DC				JE		checkChar
 00000185  B8 00000001				MOV		EAX, 1
 0000018A  89 07				MOV		[EDI], EAX
 0000018C  EB 00				JMP		ending
						
					;restore registers and stackframe
 0000018E				ending:
 0000018E  61				POPAD
 0000018F  5D				POP		EBP
 00000190  C2 000C			RET	12
 00000193			validateChars ENDP

				;**********************************************************************************
				; Name: convert
				;
				; Procedure to convert the string value entered by a user to an integer which returned by reference
				;
				; Preconditions:	input string values are between 30h and 39h,
				;					input string is type BYTE,
				;					Length of input string is passed by value
				;
				; Postconditions:	verified and transit number variables are adjusted according to returns
				;
				; Receives: [EBP + 20]		OFFSET of transitNum		
				;			[EBP + 16]		effective address of the verified local variable
				;			[EBP + 12]		length by value of the input string	
				;			[EBP + 8]		effective address of input string
				;
				; Returns: transitNumber output by reference (this is the integer value of the string)
				;			verified, 0 if valid, 1 if invalid
				;
				; Registers used: EDX, EAX, EBX, ECX, EDI, ESI
				;**********************************************************************************
 00000193			convert PROC USES EDX EAX EBX ECX EDI ESI
					local	integer:DWORD
					
					;pass in parameters to PROC
 00000193  55		   *	    push   ebp
 00000194  8B EC	   *	    mov    ebp, esp
 00000196  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000199  52		   *	    push   edx
 0000019A  50		   *	    push   eax
 0000019B  53		   *	    push   ebx
 0000019C  51		   *	    push   ecx
 0000019D  57		   *	    push   edi
 0000019E  56		   *	    push   esi
 0000019F  8B 75 08			MOV		ESI, [EBP + 8]			;input string
 000001A2  8B 4D 0C			MOV		ECX, [EBP + 12]			;length of input string
 000001A5  8B D1			MOV		EDX, ECX				;store for comparison
					
					;Clear EBX, integer & EAX
 000001A7  33 DB			XOR		EBX, EBX
 000001A9  8D 45 FC			LEA		EAX, integer
 000001AC  89 18			MOV		[EAX], EBX
 000001AE  33 C0			XOR		EAX, EAX
					
					;convert one byte at a time
 000001B0			digitByDigit:
					
					;save counter and reference to length of string
 000001B0  52				PUSH	EDX
 000001B1  AC				LODSB
					
					;if the first BYTE check if a sign character is applied, if negative, set negative flag
 000001B2  3B D1			cmp		EDX, ECX
 000001B4  75 08			JNE		digits
 000001B6  3C 2D			CMP		AL, 45
 000001B8  74 39			JE		negative
 000001BA  3C 2B			CMP		AL, 43
 000001BC  74 3C			JE		endLoop
 000001BE			digits:
					
					;subtract 48 from the value to convert the ACSII Char to an digit
 000001BE  83 E8 30			SUB		EAX, 48
 000001C1  8B F8			MOV		EDI, EAX
					
					;multiply the saved integer saved by 10 and add the result to current digit, if overflow flag is set, number is invalid
 000001C3  8B 45 FC			MOV		EAX, integer
 000001C6  BA 0000000A			MOV		EDX, 10
 000001CB  F7 E2			MUL		EDX
 000001CD  70 37			JO		tooLarge		
 000001CF  03 C7			ADD		EAX, EDI
 000001D1  70 33			JO		tooLarge
 000001D3  89 45 FC			MOV		integer, EAX	;save new integer in integer local var
					
 000001D6  B8 00000000			MOV		EAX, 0
 000001DB  5A				POP		EDX		;restore reference to the length of the original string
					
					;if sign flag is cleared, jump to the end
 000001DC  83 FB 01			CMP		EBX, 1
 000001DF  75 19			JNE		endLoop
					
					;if set and loop is on it's final pass, multiply final integer by -1 for twos compliment representation
 000001E1  83 F9 01			CMP		ECX, 1
 000001E4  75 14			JNE		endLoop	
 000001E6  8B 5D FC			MOV		EBX, integer
 000001E9  6B C3 FF			IMUL	EAX, EBX, -1
 000001EC  89 45 FC			MOV		integer, EAX
 000001EF  72 15			JC		tooLarge		;check if multiplication causes overflow (it shouldn't, but I'm supersticious)
 000001F1  EB 07			JMP		endLoop

				;if first BYTE is negative, set EBX to 1
 000001F3			negative:
 000001F3  BB 00000001			MOV		EBX, 1
 000001F8  EB 00			JMP		endLoop

 000001FA			endLoop:
 000001FA  E2 B4			LOOP	digitByDigit
					
					;Move final integer to location specified by transitNum datalabel 
 000001FC  8B 45 FC			MOV		EAX, integer
 000001FF  8B 7D 14			MOV		EDI, [EBP + 20]
 00000202  89 07			MOV		[EDI], EAX
 00000204  EB 0C			JMP		ending

				;change verified (local variable of calling proc) to 1 signifying that the integer is invalid, end Proc
 00000206			tooLarge:
 00000206  B8 00000001			MOV		EAX, 1
 0000020B  8B 7D 10			MOV		EDI, [EBP + 16]
 0000020E  89 07			MOV		[EDI], EAX
 00000210  EB 00			JMP		ending

 00000212			ending:
 00000212  5E		   *	    pop    esi
 00000213  5F		   *	    pop    edi
 00000214  59		   *	    pop    ecx
 00000215  5B		   *	    pop    ebx
 00000216  58		   *	    pop    eax
 00000217  5A		   *	    pop    edx
 00000218  C9		   *	    leave  
 00000219  C2 0010			RET		16
 0000021C			convert ENDP

				;**********************************************************************************
				; Name: WriteVal
				;
				; Procedure to convert an IntegerValue passed by value to a string and then print it to the screen
				;
				; Preconditions:	input integer must fit into 32 bit register, can be signed or unsigned
				;
				; Postconditions:	NONE
				;
				; Receives: [EBP + 8]		integer value by value
				;
				; Returns: the string representation of the integer printed to the screen
				;
				; Registers used: EAX
				;**********************************************************************************

 0000021C			writeVal	PROC
					LOCAL	outString[11]:BYTE
 0000021C  55		   *	    push   ebp
 0000021D  8B EC	   *	    mov    ebp, esp
 0000021F  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000222  50				PUSH	EAX

					;push Local variable outString to toChar PROC, and print the result
 00000223  8D 45 F5			LEA		EAX, outSTRING
 00000226  50				PUSH	EAX
 00000227  FF 75 08			PUSH	[EBP + 8]
 0000022A  E8 0000000E			call	toChar
					mDisplayString	EAX
 0000022F  52		     1		PUSH	EDX				;save register on the stack
 00000230  8B D0	     1		MOV		EDX, EAX
 00000232  E8 00000000 E     1		CALL	WriteString
 00000237  5A		     1		POP		EDX				;restore register

 00000238  58				POP		EAX
 00000239  C9		   *	    leave  
 0000023A  C2 0004			RET 4
 0000023D			writeVal	ENDP

				;**********************************************************************************
				; Name: toChar
				;
				; Sub-Procedure to convert an IntegerValue passed by value to a string
				;
				; Preconditions:input integer must fit into 32 bit register, can be signed or unsigned
				;
				; Postconditions:	NONE
				;
				; Receives: [EBP + 8]		integer value by value
				;			[EBP + 12]		outstring Effective address
				;
				; Returns: String representation of integer is stored in outStringLocal variable from calling proc
				;
				; Registers used: EAX, ESI, ECX, EDX, EDI
				;**********************************************************************************

 0000023D			toChar	PROC
 0000023D  55				PUSH	EBP
 0000023E  8B EC			MOV		EBP, ESP
 00000240  60				PUSHAD				; save registers
					
					; if the number is greater than 0, jump to conversion
 00000241  8B 45 08			MOV		EAX, [EBP + 8]
 00000244  BB 00000000			MOV		EBX, 0
 00000249  83 F8 00			CMP		EAX, 0
 0000024C  7D 0A			JGE		conversion
					
					;if number is negative, multiply by -1 to make it positive
 0000024E  BB 00000001			MOV		EBX, 1		; use the ebx register as a negative flag
 00000253  8B F0			MOV		ESI, EAX
 00000255  6B C6 FF			IMUL	EAX,ESI, -1

 00000258			conversion:
					;set up division by 10
 00000258  BE 0000000A			MOV		ESI, 10
 0000025D  B9 00000000			MOV		ECX, 0
					
					;push each digit onto the stack: isolating them by dividing by 10, remainder is LSD (least sig digit)
 00000262			digits:
 00000262  BA 00000000			MOV		EDX, 0
 00000267  F7 F6			div		ESI
 00000269  52				PUSH	EDX
 0000026A  41				INC		ECX
 0000026B  83 F8 00			CMP		EAX, 0
 0000026E  75 F2			JNE		digits

 00000270  8B 7D 0C			MOV		EDI, [EBP + 12]	;set outString as destination 

					;if the number is negative, store a '-' sigh at the front of the outString
 00000273  83 FB 01			CMP		EBX, 1
 00000276  75 06			JNE		popInto
 00000278  B8 0000002D			MOV		EAX, 45
 0000027D  AA				STOSB

				;POP each value from the stack and push it onto the string
 0000027E			popInto:
 0000027E  58				POP		EAX
 0000027F  83 C0 30			ADD		EAX, 48
 00000282  AA				STOSB
 00000283  E2 F9			LOOP	popInto
					
					;add a 0 at the end of the string
 00000285  B8 00000000			MOV		EAX, 0
 0000028A  AA				STOSB

					;restore registers and end proc
 0000028B  61				POPAD
 0000028C  5D				POP		EBP
 0000028D  C2 0008			RET		8
 00000290			toChar	ENDP

				;**********************************************************************************
				; Name: SumAvg
				;
				; Sub-Procedure to convert an IntegerValue passed by value to a string
				;
				; Preconditions: the sum of all 10 digits in the input ARRAY must fit into a 32 bit register.
				;				 There should be exactly 10 numbers stored in the input array to find the proper value
				;
				; Postconditions:	NONE
				;
				; Receives: [EBP + 20]		OFFSET averageText
				;			[EBP + 16]		OFFSET sumText
				;			[EBP + 12]		OFFSET numArray
				;			[EBP + 8]		LENGTHOF numArray
				;
				; Returns: Prints the sumText, the sum, the average text, and the average to the console.
				;
				; Registers used: EAX, ESI, ECX, EDX, EDI, ESI, EBX
				;**********************************************************************************
 00000290			sumAvg	PROC
 00000290  55				PUSH	EBP
 00000291  8B EC			MOV		EBP, ESP
 00000293  60				PUSHAD

					;pass parameters to register
 00000294  8B 75 0C			MOV		ESI, [EBP + 12]
 00000297  8B 4D 08			MOV		ECX, [EBP + 8]
 0000029A  B8 00000000			MOV		EAX, 0

					mDisplayString	[EBP + 16]		;print sum text
 0000029F  52		     1		PUSH	EDX				;save register on the stack
 000002A0  8B 55 10	     1		MOV		EDX, [EBP + 16]
 000002A3  E8 00000000 E     1		CALL	WriteString
 000002A8  5A		     1		POP		EDX				;restore register
				;sum numbers in array for total
 000002A9			sumLoop:
 000002A9  8B 1E			MOV		EBX, [ESI]
 000002AB  03 C3			ADD		EAX, EBX
 000002AD  83 C6 04			ADD		ESI, 4
 000002B0  E2 F7			LOOP	sumLoop 
					
					;push sum to writeVal
 000002B2  50				PUSH	EAX
 000002B3  E8 FFFFFF64			CALL	WriteVal
 000002B8  E8 00000000 E		CALL	Crlf
 000002BD  E8 00000000 E		CALL	Crlf
					
					
					mDisplayString	[EBP + 20]		;print average text
 000002C2  52		     1		PUSH	EDX				;save register on the stack
 000002C3  8B 55 14	     1		MOV		EDX, [EBP + 20]
 000002C6  E8 00000000 E     1		CALL	WriteString
 000002CB  5A		     1		POP		EDX				;restore register
					;sign divide the sum by the 10 to get the average
 000002CC  BB 0000000A			MOV		EBX, 10
 000002D1  BA 00000000			MOV		EDX, 0
 000002D6  99				CDQ
 000002D7  F7 FB			IDIV	EBX

					;push result to writeVal for printing
 000002D9  50				PUSH	EAX
 000002DA  E8 FFFFFF3D			CALL	WriteVal
 000002DF  E8 00000000 E		CALL	CrLf
 000002E4  E8 00000000 E		CALL	CrLf
					
					;restore registers and print
 000002E9  61				POPAD
 000002EA  5D				POP		EBP
 000002EB  C2 0010			RET		16
 000002EE			sumAvg	ENDP

				;**********************************************************************************
				; Name: goodbye
				;
				; print a farewell string
				;
				; Preconditions: None
				;
				; Postconditions:	NONE
				;
				; Receives: [EBP + 8]		OFFSET farewellText
				;
				; Returns: Prints s good bye message to the console.
				;
				; Registers used: EDX
				;**********************************************************************************
 000002EE			goodbye	PROC
 000002EE  55				PUSH	EBP
 000002EF  8B EC			MOV		EBP, ESP

					mDisplayString	[EBP + 8]
 000002F1  52		     1		PUSH	EDX				;save register on the stack
 000002F2  8B 55 08	     1		MOV		EDX, [EBP + 8]
 000002F5  E8 00000000 E     1		CALL	WriteString
 000002FA  5A		     1		POP		EDX				;restore register

 000002FB  5D				POP		EBP
 000002FC  C2 0004			RET		4
 000002FF			goodbye	ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30146.0	    12/01/22 20:29:18
!Proj5_syeds     (Proj5_syeds.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000210 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002FF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
convert  . . . . . . . . . . . .	P Near	 00000193 _TEXT	Length= 00000089 Public STDCALL
  integer  . . . . . . . . . . .	DWord	 bp - 00000004
  digitByDigit . . . . . . . . .	L Near	 000001B0 _TEXT	
  digits . . . . . . . . . . . .	L Near	 000001BE _TEXT	
  negative . . . . . . . . . . .	L Near	 000001F3 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 000001FA _TEXT	
  tooLarge . . . . . . . . . . .	L Near	 00000206 _TEXT	
  ending . . . . . . . . . . . .	L Near	 00000212 _TEXT	
goodbye  . . . . . . . . . . . .	P Near	 000002EE _TEXT	Length= 00000011 Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 000000AD _TEXT	Length= 00000031 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AD Public STDCALL
  getNumbers . . . . . . . . . .	L Near	 00000019 _TEXT	
  writeNumbers . . . . . . . . .	L Near	 00000059 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 00000075 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000DE _TEXT	Length= 00000076 Public STDCALL
  inputInt . . . . . . . . . . .	Byte	 bp - 00000014
  verified . . . . . . . . . . .	DWord	 bp - 00000018
  getInput . . . . . . . . . . .	L Near	 000000E5 _TEXT	
  invalid  . . . . . . . . . . .	L Near	 00000120 _TEXT	
  valid  . . . . . . . . . . . .	L Near	 00000139 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sumAvg . . . . . . . . . . . . .	P Near	 00000290 _TEXT	Length= 0000005E Public STDCALL
  sumLoop  . . . . . . . . . . .	L Near	 000002A9 _TEXT	
toChar . . . . . . . . . . . . .	P Near	 0000023D _TEXT	Length= 00000053 Public STDCALL
  conversion . . . . . . . . . .	L Near	 00000258 _TEXT	
  digits . . . . . . . . . . . .	L Near	 00000262 _TEXT	
  popInto  . . . . . . . . . . .	L Near	 0000027E _TEXT	
validateChars  . . . . . . . . .	P Near	 00000154 _TEXT	Length= 0000003F Public STDCALL
  checkChar  . . . . . . . . . .	L Near	 00000161 _TEXT	
  invalidChar  . . . . . . . . .	L Near	 0000016E _TEXT	
  firstCharCHeck . . . . . . . .	L Near	 0000017C _TEXT	
  ending . . . . . . . . . . . .	L Near	 0000018E _TEXT	
writeVal . . . . . . . . . . . .	P Near	 0000021C _TEXT	Length= 00000021 Public STDCALL
  outString  . . . . . . . . . .	Byte	 bp - 0000000B
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayText  . . . . . . . . . . .	Byte	 00000139 _DATA	
averageText  . . . . . . . . . .	Byte	 0000018F _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commaSpace . . . . . . . . . . .	Byte	 000001E1 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewellText . . . . . . . . . .	Byte	 000001BC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructText . . . . . . . . . .	Byte	 00000043 _DATA	
invalidText  . . . . . . . . . .	Byte	 000000E9 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 000001E4 _DATA	
promptText . . . . . . . . . . .	Byte	 000000C9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumText  . . . . . . . . . . . .	Byte	 00000170 _DATA	
titleText  . . . . . . . . . . .	Byte	 00000000 _DATA	
transitNum . . . . . . . . . . .	DWord	 0000020C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
